#!/usr/bin/env python3
#
# Fix uid/gid values to match those in a new passwd file
#
# Copyright 2017 Colin Walters <walters@verbum.org>
# Licensed under the new-BSD license (http://www.opensource.org/licenses/bsd-license.php)

import sys,os,argparse,stat,collections,re

class bidict(dict):
    def __init__(self, *args, **kwargs):
        super(bidict, self).__init__(*args, **kwargs)
        self.inverse = {}
        for key, value in self.items():
            self.inverse.setdefault(value,[]).append(key)

    def __setitem__(self, key, value):
        if key in self:
            self.inverse[self[key]].remove(key)
        super(bidict, self).__setitem__(key, value)
        self.inverse.setdefault(value,[]).append(key)

    def __delitem__(self, key):
        self.inverse.setdefault(self[key],[]).remove(key)
        if self[key] in self.inverse and not self.inverse[self[key]]:
            del self.inverse[self[key]]
        super(bidict, self).__delitem__(key)

def readpw(path):
    db = bidict()
    with open(path) as f:
        for line in f:
            if line == '': continue
            (name, _, uid, gid, _) = line.split(':', 4)
            uidv = int(uid)
            assert uidv not in db
            db[uidv] = name
    return db
def readgr(path):
    db = bidict()
    with open(path) as f:
        for line in f:
            if line == '': continue
            (name, _, gid, _) = line.split(':', 3)
            gidv = int(gid)
            assert gidv not in db
            db[gidv] = name
    return db

parser = argparse.ArgumentParser(prog=sys.argv[0])
parser.add_argument("path", help="filesystem tree path",
                    action='store')
parser.add_argument("passwd", help="New passwd file",
                    action='store')
parser.add_argument("group", help="New group file",
                    action='store')
args = parser.parse_args()

orig_passwd_db = readpw(args.path + '/etc/passwd')
orig_group_db = readgr(args.path + '/etc/group')
new_passwd_db = readpw(args.passwd)
new_group_db = readgr(args.group)

def deltadb(a, b, msg):
    r = {}
    for idv,aname in a.items():
        bname = b.get(idv)
        if bname is None:
            bidv = b.inverse[aname][0]
            print("{}: {}:{} is {} in new db".format(msg, aname, idv, bidv))
            continue
        if aname == bname:
            continue
        bidv_entry = b.inverse.get(aname)
        if bidv_entry is None:
            print("{}: missing changed {}".format(msg, aname))
            r[idv] = -1
        else:
            bidv = bidv_entry[0]
            print("{}: {}:{} -> {}:{}".format(msg, aname, idv, bname, bidv))
            r[idv] = bidv
    return r

delta_passwd = deltadb(orig_passwd_db, new_passwd_db, "passwd")
delta_group = deltadb(orig_group_db, new_group_db, "group")

print("passwd delta: {}".format(delta_passwd))
print("group delta: {}".format(delta_group))

n_processed = 0
n_ok = 0
def chown_path(dfd, name, fpath):
    global n_processed, n_ok
    stbuf = os.lstat(name, dir_fd=dfd)
    uid_or_gid_nonzero = False
    new_uid = None
    new_gid = None
    if stbuf.st_uid != 0:
        new_uid = delta_passwd.get(stbuf.st_uid)
        uid_or_gid_nonzero = True
    if stbuf.st_gid != 0:
        new_gid = delta_group.get(stbuf.st_gid)
        uid_or_gid_nonzero = True
    n_processed += 1
    if not uid_or_gid_nonzero:
        return
    if new_uid is None and new_gid is None:
        n_ok += 1
        return
    if fpath.startswith('./'):
        fpath = fpath[1:]
    print("chown {} {}:{} -> {}:{}".format(fpath, stbuf.st_uid, stbuf.st_gid, new_uid, new_gid))

rootfd = os.open(args.path, os.O_DIRECTORY)
for (dpath, dirnames, fnames, dfd) in os.fwalk(dir_fd=rootfd):
    for fname in fnames:
        chown_path(dfd, fname, dpath + '/' + fname)
    for dname in dirnames:
        chown_path(dfd, dname, dpath + '/' + dname)

print("{} verified OK, {} total".format(n_ok, n_processed))
