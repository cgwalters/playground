#!/usr/bin/env python3

import os,sys,argparse
import json,hmac,pytoml,datetime
import requests

parser = argparse.ArgumentParser(prog="github-file-issue")
parser.add_argument("--dry-run", help="Do not change hooks, just print",
                    action='store_true')
parser.add_argument("--org", help="Default organization", action='store')
parser.add_argument("--issue", '-F', help="Issue file",
                    action='store', required=True)
parser.add_argument("repo", help="Repo name", nargs='*')

args = parser.parse_args()

def fatal(msg):
    sys.stderr.write(msg + '\n')
    sys.exit(1)

with open('github-token.txt') as f:
    token = f.read().strip()
token_header = {'Authorization': 'token ' + token}

# Only pick up issues filed in the last 30 days
ISSUE_SINCE = (datetime.datetime.utcnow() - datetime.timedelta(days=30)).replace(microsecond=0).isoformat() + 'Z'

with open(args.issue) as f:
    issue_title = f.readline().strip()
    assert len(issue_title) < 120
    issue_nl = f.readline()
    assert issue_nl == '\n'
    issue_body = f.read()

def reqfail(r):
    print("{} {} failed with {}".format(r.request.method, r.url, r.status_code))
    print(r.headers)
    print(r.json())
    exit(1)

def canon_org_repo(reponame):
    idx = reponame.find('/')
    if idx != -1:
        return (reponame[0:idx], reponame[idx+1:])
    else:
        if args.org is None:
            fatal("No organization specified for repository: {}".format(reponame))
        return (args.org, reponame)

def have_issue(repo_url):
    api_url = repo_url + '/issues?since={}'.format(ISSUE_SINCE)
    r = requests.get(api_url, headers=token_header)
    if r.status_code != requests.codes.ok:
        reqfail(r)
    for issue in r.json():
        if issue['title'].startswith(issue_title):
            return True
    return False

repos = map(canon_org_repo, set(args.repo))
for repo in repos:
    repo_url = "https://api.github.com/repos/{}/{}".format(repo[0], repo[1])
    r = requests.get(repo_url, headers=token_header)
    if r.status_code != requests.codes.ok:
        reqfail(r)
    repodata = r.json()
    if repodata['archived']:
        print("Repository is already archived: {}".format(repo))
        continue
    if not repodata['has_issues']:
        print("Issues are not enabled for: {}".format(repo))
        continue
    if have_issue(repo_url):
        print("Issue already filed for: {}".format(repo))
        continue
    print("Didn't find issue on {}".format(repo))
    if not args.dry_run:
        data = {'title': issue_title, 'body': issue_body}
        print(data)
        r = requests.post(repo_url + '/issues', json=data, headers=token_header)
        if r.status_code != 201:
            reqfail(r)
